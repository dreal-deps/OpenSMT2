#line 2 "smt2lexer.cc"

#line 4 "smt2lexer.cc"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define yy_create_buffer smt2_create_buffer
#define yy_delete_buffer smt2_delete_buffer
#define yy_flex_debug smt2_flex_debug
#define yy_init_buffer smt2_init_buffer
#define yy_flush_buffer smt2_flush_buffer
#define yy_load_buffer_state smt2_load_buffer_state
#define yy_switch_to_buffer smt2_switch_to_buffer
#define yyin smt2in
#define yyleng smt2leng
#define yylex smt2lex
#define yylineno smt2lineno
#define yyout smt2out
#define yyrestart smt2restart
#define yytext smt2text
#define yywrap smt2wrap
#define yyalloc smt2alloc
#define yyrealloc smt2realloc
#define yyfree smt2free

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5
#define YY_FLEX_SUBMINOR_VERSION 35
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;
#endif /* ! C99 */

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! FLEXINT_H */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

/* C99 requires __STDC__ to be defined as 1. */
#if defined (__STDC__)

#define YY_USE_CONST

#endif	/* defined (__STDC__) */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE smt2restart(smt2in  )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#define YY_BUF_SIZE 16384
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

extern yy_size_t smt2leng;

extern FILE *smt2in, *smt2out;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    /* Note: We specifically omit the test for yy_rule_can_match_eol because it requires
     *       access to the local variable yy_act. Since yyless() is a macro, it would break
     *       existing scanners that call yyless() from OUTSIDE smt2lex. 
     *       One obvious solution it to make yy_act a global. I tried that, and saw
     *       a 5% performance hit in a non-smt2lineno scanner, because yy_act is
     *       normally declared as a register variable-- so it is not worth it.
     */
    #define  YY_LESS_LINENO(n) \
            do { \
                int yyl;\
                for ( yyl = n; yyl < smt2leng; ++yyl )\
                    if ( smt2text[yyl] == '\n' )\
                        --smt2lineno;\
            }while(0)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up smt2text. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up smt2text again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, (yytext_ptr)  )

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	yy_size_t yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */
    
	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via smt2restart()), so that the user can continue scanning by
	 * just pointing smt2in at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* Stack of input buffers. */
static size_t yy_buffer_stack_top = 0; /**< index of top of stack. */
static size_t yy_buffer_stack_max = 0; /**< capacity of stack. */
static YY_BUFFER_STATE * yy_buffer_stack = 0; /**< Stack as an array. */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

/* yy_hold_char holds the character lost when smt2text is formed. */
static char yy_hold_char;
static yy_size_t yy_n_chars;		/* number of characters read into yy_ch_buf */
yy_size_t smt2leng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = (char *) 0;
static int yy_init = 0;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* Flag which is used to allow smt2wrap()'s to do buffer switches
 * instead of setting up a fresh smt2in.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

void smt2restart (FILE *input_file  );
void smt2_switch_to_buffer (YY_BUFFER_STATE new_buffer  );
YY_BUFFER_STATE smt2_create_buffer (FILE *file,int size  );
void smt2_delete_buffer (YY_BUFFER_STATE b  );
void smt2_flush_buffer (YY_BUFFER_STATE b  );
void smt2push_buffer_state (YY_BUFFER_STATE new_buffer  );
void smt2pop_buffer_state (void );

static void smt2ensure_buffer_stack (void );
static void smt2_load_buffer_state (void );
static void smt2_init_buffer (YY_BUFFER_STATE b,FILE *file  );

#define YY_FLUSH_BUFFER smt2_flush_buffer(YY_CURRENT_BUFFER )

YY_BUFFER_STATE smt2_scan_buffer (char *base,yy_size_t size  );
YY_BUFFER_STATE smt2_scan_string (yyconst char *yy_str  );
YY_BUFFER_STATE smt2_scan_bytes (yyconst char *bytes,yy_size_t len  );

void *smt2alloc (yy_size_t  );
void *smt2realloc (void *,yy_size_t  );
void smt2free (void *  );

#define yy_new_buffer smt2_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        smt2ensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            smt2_create_buffer(smt2in,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        smt2ensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            smt2_create_buffer(smt2in,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

#define smt2wrap(n) 1
#define YY_SKIP_YYWRAP

typedef unsigned char YY_CHAR;

FILE *smt2in = (FILE *) 0, *smt2out = (FILE *) 0;

typedef int yy_state_type;

extern int smt2lineno;

int smt2lineno = 1;

extern char *smt2text;
#define yytext_ptr smt2text

static yy_state_type yy_get_previous_state (void );
static yy_state_type yy_try_NUL_trans (yy_state_type current_state  );
static int yy_get_next_buffer (void );
static void yy_fatal_error (yyconst char msg[]  );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up smt2text.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
	smt2leng = (size_t) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
	(yy_c_buf_p) = yy_cp;

#define YY_NUM_RULES 108
#define YY_END_OF_BUFFER 109
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static yyconst flex_int16_t yy_accept[519] =
    {   0,
        0,    0,    0,    0,    0,    0,  109,  107,    1,    1,
       39,  107,  107,   99,  105,   43,   41,   42,   44,   94,
       94,  107,  107,   48,   45,   49,   99,   99,   99,   99,
      106,   99,   99,   99,   99,   99,   99,   99,   99,   99,
       99,   99,   99,   99,   99,   99,   99,   99,  100,  101,
      102,  103,  108,   99,    0,  104,    0,    0,    0,    0,
       94,   98,   98,   98,   98,   98,   98,   98,    0,    2,
       46,   81,   47,   99,   99,   99,   99,   99,   99,   34,
       99,   99,   99,   99,   99,   99,   99,   99,   99,   99,
       99,   99,   99,   83,   99,   99,   99,   99,   99,   99,

       99,   99,   99,   97,   96,   95,   95,   98,   98,   98,
       98,   98,   98,   98,   99,   99,   91,   99,   82,   99,
       99,   99,   99,   99,   99,   99,   99,   99,   99,   99,
       99,   99,   99,   99,   99,   99,   99,   99,   99,   85,
       89,   36,   84,   23,   99,   99,   99,   99,   99,   99,
       99,   86,   99,   98,   98,   98,   98,   98,   98,   98,
       98,   99,   93,   92,   99,   99,   99,   99,   99,   99,
       99,   99,   61,   99,   99,   99,   99,   99,   99,   99,
       99,   99,   99,   99,   99,   99,   99,   76,   99,   99,
       33,   99,   99,   99,   99,   22,   99,   99,   99,   99,

       99,   87,   99,   98,   98,   98,   98,   98,   98,   98,
       98,   90,   99,   64,   60,   99,   99,   66,   67,   63,
       99,   53,   51,   70,   52,   50,   99,   65,   57,   55,
       56,   54,   99,   62,   99,   99,   99,   99,   99,   99,
       99,   88,   99,   99,   99,   99,   99,   99,   99,   99,
       99,   99,   99,   99,   99,   74,   99,   98,   98,   98,
       98,   98,   98,   98,   98,   40,   69,   68,   73,   71,
       72,   99,   58,   99,   99,   99,   38,   99,   37,   99,
       99,   99,   99,   99,   99,   99,   75,   99,   99,   99,
       99,   99,   98,   98,   98,   98,   98,   98,   98,   98,

       99,   99,   99,   99,   59,   99,   99,   99,   99,   99,
       99,   99,   99,   99,   99,   99,   99,   99,   98,   98,
       98,   98,   98,   98,   98,   98,   99,   99,   99,   99,
       35,   99,   99,   32,   99,   99,   99,   99,   99,   99,
       99,   16,   99,   99,   99,   99,   98,   98,   98,   98,
       98,   98,   98,   98,   24,   99,   99,   99,   99,   99,
       99,   99,   99,   26,   99,   29,   99,   99,   15,   99,
       99,   99,   98,   98,   98,   98,   98,   98,   98,   98,
       98,   98,   98,   14,   99,   99,   21,   99,   99,   99,
       99,   31,   99,   99,   99,   17,   99,   99,   98,   98,

       98,   98,   98,   98,   98,   98,   98,   98,   98,   20,
       99,   19,   99,   99,   99,   99,   79,   99,   77,   78,
       98,   98,   98,   98,   98,   98,   98,   98,   98,   13,
       98,   18,   99,   99,   99,   99,   80,   98,   98,   98,
       98,   98,   98,   98,   98,   98,   98,   99,   99,   99,
       99,   98,   98,   98,    3,   98,   98,   98,   98,   98,
       98,   25,   30,   99,   28,   98,   98,   98,   98,   98,
        9,    6,   98,   98,   99,   98,   98,   98,   98,   98,
       98,   98,   27,   98,   98,    5,   98,   98,   98,   98,
       98,   98,   98,   98,   98,   98,   98,    4,   98,   98,

       98,   98,   98,   10,   98,    7,   98,   98,    8,   98,
       98,   98,   98,   11,   98,   98,   12,    0
    } ;

static yyconst flex_int32_t yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    4,    5,    6,    7,    7,    7,    8,    9,
        9,   10,   11,    1,   12,   13,   14,   15,   16,   17,
       17,   17,   17,   17,   17,   17,   17,   18,   19,   20,
       21,   22,    7,    7,   23,   24,   25,   25,   25,   25,
        7,    7,   26,    7,    7,    7,    7,    7,    7,    7,
        7,   27,    7,    7,    7,    7,    7,    7,    7,    7,
        1,    1,    1,    7,   28,    1,   29,   30,   31,   32,

       33,   34,   35,   36,   37,    7,   38,   39,   40,   41,
       42,   43,    7,   44,   45,   46,   47,   48,    7,   49,
       50,   51,    1,   52,    1,    7,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst flex_int32_t yy_meta[53] =
    {   0,
        1,    1,    2,    3,    1,    1,    3,    4,    1,    3,
        3,    3,    3,    3,    5,    5,    5,    1,    1,    3,
        3,    3,    5,    5,    5,    3,    3,    3,    5,    5,
        5,    5,    5,    5,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    1
    } ;

static yyconst flex_int16_t yy_base[527] =
    {   0,
        0,    0,   50,   51,    0,    0,  569,  570,  570,  570,
        0,  563,   25,    0,  570,    0,    0,    0,    0,   43,
       48,   34,  564,  545,  543,  543,  519,  520,  520,  527,
        0,   27,  511,   33,   43,  509,   28,  524,   39,  523,
      513,  510,   37,  511,   50,  508,  509,  517,  570,  570,
      570,  570,  570,    0,  544,  543,   73,    0,   75,   82,
       91,    0,  510,  497,  504,  500,   72,  510,  539,  570,
        0,    0,    0,  497,  498,  493,  509,    0,  505,  491,
       80,  502,  493,   79,   66,   77,  494,  488,  485,  496,
      496,  482,  481,    0,  483,  480,  478,   47,  488,  480,

      474,  476,  475,  100,    0,  115,  118,  489,  474,  470,
       75,  474,  479,  469,  483,  472,    0,  471,    0,  476,
       96,  463,  460,  103,  462,  107,  105,  463,  473,  472,
      463,  464,  466,  453,  102,  454,  452,  467,  483,    0,
        0,    0,    0,    0,  458,  464,  459,  479,  449,  445,
      455,    0,  445,  451,  456,  451,  442,  450,  449,  433,
      449,  428,    0,    0,  433,  444,  443,  438,  437,  433,
      436,  424,    0,  432,   48,  429,  117,  434,  436,  119,
      120,  432,  420,  425,  433,  432,  419,    0,  422,  412,
        0,  428,  423,  416,  127,    0,  408,  422,  118,  424,

      418,    0,  422,  408,  407,  403,  400,  398,  402,  404,
      400,    0,  395,    0,    0,  396,  395,    0,    0,    0,
      390,    0,    0,    0,    0,    0,  397,    0,    0,    0,
        0,    0,  396,    0,  423,  388,  389,  399,  390,  385,
      398,    0,  389,  382,  385,  382,  380,  382,  393,  388,
      374,  378,  376,  374,  383,    0,  382,  372,  381,  383,
      399,  379,  369,  379,  362,    0,    0,    0,    0,    0,
        0,  361,    0,  372,  392,  372,    0,  356,    0,  356,
       92,  354,  357,  353,  358,  368,    0,  361,  359,  347,
      343,  342,  345,  377,  357,  342,  353,  373,  340,  346,

      353,  369,  127,  334,    0,  125,  337,  345,  340,  334,
      346,  327,  129,  331,  335,  334,  324,  323,  322,  335,
      320,  318,  352,  318,  350,  315,  314,  133,  312,  316,
        0,  313,  321,    0,  311,  312,  319,  306,  318,  317,
      312,    0,  317,  305,  313,  312,  307,  310,  305,  310,
      142,  307,  297,  288,    0,  290,  294,  294,  290,  287,
      291,  288,  289,    0,  317,    0,  294,  292,    0,  285,
      284,  283,  292,  288,  273,  289,  274,  277,  275,  272,
      274,  281,  266,    0,  271,  267,    0,  264,  272,  268,
      265,    0,  275,  259,  268,    0,  271,  270,  289,  263,

      266,  265,  252,  250,  263,  252,  248,  260,  245,    0,
      244,    0,  247,  255,  248,  244,    0,  239,    0,    0,
      242,  242,  270,  236,  243,  246,  245,  235,  247,    0,
      232,    0,  233,  232,  243,  227,    0,  223,  232,  228,
      222,  231,  221,  225,  229,  216,  214,  215,  213,  217,
      224,  210,  209,  212,    0,  212,  209,  206,  205,  237,
      202,    0,    0,  201,    0,  203,  208,  212,  203,  200,
        0,    0,  210,  228,  194,  191,  195,  203,  202,  195,
      191,  201,    0,  185,  189,    0,  188,  199,  183,  190,
      213,  179,  177,  181,  188,  191,  188,    0,  164,  158,

      143,  146,  150,    0,  139,    0,  142,  152,    0,  147,
      136,  137,  118,    0,   91,   79,    0,  570,  189,  194,
      197,  202,  205,  210,  213,   57
    } ;

static yyconst flex_int16_t yy_def[527] =
    {   0,
      518,    1,  519,  519,  520,  520,  518,  518,  518,  518,
      521,  522,  518,  521,  518,  521,  521,  521,  521,  518,
      518,  523,  524,  521,  521,  521,  521,  521,  521,  521,
      525,  521,  521,  521,  521,  521,  521,  521,  521,  521,
      521,  521,  521,  521,  521,  521,  521,  521,  518,  518,
      518,  518,  518,  521,  522,  522,  518,  526,  518,  518,
      518,  523,  523,  523,  523,  523,  523,  523,  524,  518,
      521,  521,  521,  521,  521,  521,  521,  525,  521,  521,
      521,  521,  521,  521,  521,  521,  521,  521,  521,  521,
      521,  521,  521,  521,  521,  521,  521,  521,  521,  521,

      521,  521,  521,  518,  526,  518,  518,  523,  523,  523,
      523,  523,  523,  523,  521,  521,  521,  521,  521,  521,
      521,  521,  521,  521,  521,  521,  521,  521,  521,  521,
      521,  521,  521,  521,  521,  521,  521,  521,  521,  521,
      521,  521,  521,  521,  521,  521,  521,  521,  521,  521,
      521,  521,  521,  523,  523,  523,  523,  523,  523,  523,
      523,  521,  521,  521,  521,  521,  521,  521,  521,  521,
      521,  521,  521,  521,  521,  521,  521,  521,  521,  521,
      521,  521,  521,  521,  521,  521,  521,  521,  521,  521,
      521,  521,  521,  521,  521,  521,  521,  521,  521,  521,

      521,  521,  521,  523,  523,  523,  523,  523,  523,  523,
      523,  521,  521,  521,  521,  521,  521,  521,  521,  521,
      521,  521,  521,  521,  521,  521,  521,  521,  521,  521,
      521,  521,  521,  521,  521,  521,  521,  521,  521,  521,
      521,  521,  521,  521,  521,  521,  521,  521,  521,  521,
      521,  521,  521,  521,  521,  521,  521,  523,  523,  523,
      523,  523,  523,  523,  523,  521,  521,  521,  521,  521,
      521,  521,  521,  521,  521,  521,  521,  521,  521,  521,
      521,  521,  521,  521,  521,  521,  521,  521,  521,  521,
      521,  521,  523,  523,  523,  523,  523,  523,  523,  523,

      521,  521,  521,  521,  521,  521,  521,  521,  521,  521,
      521,  521,  521,  521,  521,  521,  521,  521,  523,  523,
      523,  523,  523,  523,  523,  523,  521,  521,  521,  521,
      521,  521,  521,  521,  521,  521,  521,  521,  521,  521,
      521,  521,  521,  521,  521,  521,  523,  523,  523,  523,
      523,  523,  523,  523,  521,  521,  521,  521,  521,  521,
      521,  521,  521,  521,  521,  521,  521,  521,  521,  521,
      521,  521,  523,  523,  523,  523,  523,  523,  523,  523,
      523,  523,  523,  523,  521,  521,  521,  521,  521,  521,
      521,  521,  521,  521,  521,  521,  521,  521,  523,  523,

      523,  523,  523,  523,  523,  523,  523,  523,  523,  521,
      521,  521,  521,  521,  521,  521,  521,  521,  521,  521,
      523,  523,  523,  523,  523,  523,  523,  523,  523,  523,
      523,  521,  521,  521,  521,  521,  521,  523,  523,  523,
      523,  523,  523,  523,  523,  523,  523,  521,  521,  521,
      521,  523,  523,  523,  523,  523,  523,  523,  523,  523,
      523,  521,  521,  521,  521,  523,  523,  523,  523,  523,
      523,  523,  523,  523,  521,  523,  523,  523,  523,  523,
      523,  523,  521,  523,  523,  523,  523,  523,  523,  523,
      523,  523,  523,  523,  523,  523,  523,  523,  523,  523,

      523,  523,  523,  523,  523,  523,  523,  523,  523,  523,
      523,  523,  523,  523,  523,  523,  523,    0,  518,  518,
      518,  518,  518,  518,  518,  518
    } ;

static yyconst flex_int16_t yy_nxt[623] =
    {   0,
        8,    9,   10,   11,   12,   13,   14,   14,   15,   16,
       17,   18,   14,   19,   20,   21,   21,   22,   23,   24,
       25,   26,   27,   28,   14,   29,   30,   31,   32,   33,
       34,   35,   36,   37,   38,   14,   39,   14,   40,   14,
       41,   42,   43,   44,   45,   46,   14,   14,   47,   14,
       48,   49,   51,   51,   57,   59,   87,   60,   60,   60,
       59,  105,   61,   61,   61,   63,   64,   79,   82,   88,
       65,   80,   90,   58,   83,   84,   66,   67,   95,   85,
      222,   68,   98,   96,   91,  147,   99,  104,  104,  106,
      107,  107,  148,  223,   59,  100,   60,   60,   60,  133,

      112,   52,   52,   59,  113,   61,   61,   61,  121,  131,
      134,  157,  132,  135,  104,  104,  158,  517,  122,  123,
      124,  125,  136,  516,  126,  307,  127,  166,  128,  106,
      107,  107,  107,  107,  107,  171,  167,  308,  174,  180,
      168,  175,  176,  181,  172,  177,  190,  191,  182,  225,
      178,  229,  231,  179,  252,  244,  253,  332,  515,  254,
      329,  333,  226,  245,  230,  232,  356,  340,  246,  247,
      377,  330,  341,  248,  249,  514,  513,  357,  378,  512,
      511,  379,  510,  509,  380,  508,  507,  506,  381,   50,
       50,   50,   50,   50,   53,   53,   53,   53,   53,   54,

       54,   54,   55,  505,   55,   55,   55,   62,  504,   62,
       69,   69,   69,   69,   69,   78,   78,   78,  503,  502,
      501,  500,  499,  498,  497,  496,  495,  494,  493,  492,
      491,  490,  489,  488,  487,  486,  485,  484,  483,  482,
      481,  480,  479,  478,  477,  476,  475,  474,  473,  472,
      471,  470,  469,  468,  467,  466,  465,  464,  463,  462,
      461,  460,  459,  458,  457,  456,  455,  454,  453,  452,
      451,  450,  449,  448,  447,  446,  445,  444,  443,  442,
      441,  440,  439,  438,  437,  436,  435,  434,  433,  432,
      431,  430,  429,  428,  427,  426,  425,  424,  423,  422,

      421,  420,  419,  418,  417,  416,  415,  414,  413,  412,
      411,  410,  409,  408,  407,  406,  405,  404,  403,  402,
      401,  400,  399,  398,  397,  396,  395,  394,  393,  392,
      391,  390,  389,  388,  387,  386,  385,  384,  383,  382,
      376,  375,  374,  373,  372,  371,  370,  369,  368,  367,
      366,  365,  364,  363,  362,  361,  360,  359,  358,  355,
      354,  353,  352,  351,  350,  349,  348,  347,  346,  345,
      344,  343,  342,  339,  338,  337,  336,  335,  334,  331,
      328,  327,  326,  325,  324,  323,  322,  321,  320,  319,
      318,  317,  316,  315,  314,  313,  312,  311,  310,  309,

      306,  305,  304,  303,  302,  301,  300,  299,  298,  297,
      296,  295,  294,  293,  292,  291,  290,  289,  288,  287,
      286,  285,  284,  283,  282,  281,  280,  279,  278,  277,
      276,  275,  274,  273,  272,  271,  270,  269,  268,  267,
      266,  265,  264,  263,  262,  261,  260,  259,  258,  257,
      256,  255,  251,  250,  243,  242,  241,  240,  239,  238,
      237,  236,  235,  234,  233,  228,  227,  224,  221,  220,
      219,  218,  217,  216,  215,  214,  213,  212,  211,  210,
      209,  208,  207,  206,  205,  204,  203,  202,  201,  200,
      199,  198,  197,  196,  195,  194,  193,  192,  189,  188,

      187,  186,  185,  184,  183,  173,  170,  169,  165,  164,
      163,  162,  161,  160,  159,  156,  155,  154,  153,  152,
      151,  150,  149,  146,  145,  144,  143,  142,  141,  140,
      139,  138,  137,  130,  129,  120,  119,  118,  117,  116,
      115,   70,  114,  111,  110,  109,  108,   56,   56,  103,
      102,  101,   97,   94,   93,   92,   89,   86,   81,   77,
       76,   75,   74,   73,   72,   71,   70,   56,  518,    7,
      518,  518,  518,  518,  518,  518,  518,  518,  518,  518,
      518,  518,  518,  518,  518,  518,  518,  518,  518,  518,
      518,  518,  518,  518,  518,  518,  518,  518,  518,  518,

      518,  518,  518,  518,  518,  518,  518,  518,  518,  518,
      518,  518,  518,  518,  518,  518,  518,  518,  518,  518,
      518,  518
    } ;

static yyconst flex_int16_t yy_chk[623] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    3,    4,   13,   20,   37,   20,   20,   20,
       21,  526,   21,   21,   21,   22,   22,   32,   34,   37,
       22,   32,   39,   13,   34,   35,   22,   22,   43,   35,
      175,   22,   45,   43,   39,   98,   45,   57,   57,   59,
       59,   59,   98,  175,   60,   45,   60,   60,   60,   85,

       67,    3,    4,   61,   67,   61,   61,   61,   81,   84,
       85,  111,   84,   86,  104,  104,  111,  516,   81,   81,
       81,   81,   86,  515,   81,  281,   81,  121,   81,  106,
      106,  106,  107,  107,  107,  124,  121,  281,  126,  127,
      121,  126,  126,  127,  124,  126,  135,  135,  127,  177,
      126,  180,  181,  126,  199,  195,  199,  306,  513,  199,
      303,  306,  177,  195,  180,  181,  328,  313,  195,  195,
      351,  303,  313,  195,  195,  512,  511,  328,  351,  510,
      508,  351,  507,  505,  351,  503,  502,  501,  351,  519,
      519,  519,  519,  519,  520,  520,  520,  520,  520,  521,

      521,  521,  522,  500,  522,  522,  522,  523,  499,  523,
      524,  524,  524,  524,  524,  525,  525,  525,  497,  496,
      495,  494,  493,  492,  491,  490,  489,  488,  487,  485,
      484,  482,  481,  480,  479,  478,  477,  476,  475,  474,
      473,  470,  469,  468,  467,  466,  464,  461,  460,  459,
      458,  457,  456,  454,  453,  452,  451,  450,  449,  448,
      447,  446,  445,  444,  443,  442,  441,  440,  439,  438,
      436,  435,  434,  433,  431,  429,  428,  427,  426,  425,
      424,  423,  422,  421,  418,  416,  415,  414,  413,  411,
      409,  408,  407,  406,  405,  404,  403,  402,  401,  400,

      399,  398,  397,  395,  394,  393,  391,  390,  389,  388,
      386,  385,  383,  382,  381,  380,  379,  378,  377,  376,
      375,  374,  373,  372,  371,  370,  368,  367,  365,  363,
      362,  361,  360,  359,  358,  357,  356,  354,  353,  352,
      350,  349,  348,  347,  346,  345,  344,  343,  341,  340,
      339,  338,  337,  336,  335,  333,  332,  330,  329,  327,
      326,  325,  324,  323,  322,  321,  320,  319,  318,  317,
      316,  315,  314,  312,  311,  310,  309,  308,  307,  304,
      302,  301,  300,  299,  298,  297,  296,  295,  294,  293,
      292,  291,  290,  289,  288,  286,  285,  284,  283,  282,

      280,  278,  276,  275,  274,  272,  265,  264,  263,  262,
      261,  260,  259,  258,  257,  255,  254,  253,  252,  251,
      250,  249,  248,  247,  246,  245,  244,  243,  241,  240,
      239,  238,  237,  236,  235,  233,  227,  221,  217,  216,
      213,  211,  210,  209,  208,  207,  206,  205,  204,  203,
      201,  200,  198,  197,  194,  193,  192,  190,  189,  187,
      186,  185,  184,  183,  182,  179,  178,  176,  174,  172,
      171,  170,  169,  168,  167,  166,  165,  162,  161,  160,
      159,  158,  157,  156,  155,  154,  153,  151,  150,  149,
      148,  147,  146,  145,  139,  138,  137,  136,  134,  133,

      132,  131,  130,  129,  128,  125,  123,  122,  120,  118,
      116,  115,  114,  113,  112,  110,  109,  108,  103,  102,
      101,  100,   99,   97,   96,   95,   93,   92,   91,   90,
       89,   88,   87,   83,   82,   80,   79,   77,   76,   75,
       74,   69,   68,   66,   65,   64,   63,   56,   55,   48,
       47,   46,   44,   42,   41,   40,   38,   36,   33,   30,
       29,   28,   27,   26,   25,   24,   23,   12,    7,  518,
      518,  518,  518,  518,  518,  518,  518,  518,  518,  518,
      518,  518,  518,  518,  518,  518,  518,  518,  518,  518,
      518,  518,  518,  518,  518,  518,  518,  518,  518,  518,

      518,  518,  518,  518,  518,  518,  518,  518,  518,  518,
      518,  518,  518,  518,  518,  518,  518,  518,  518,  518,
      518,  518
    } ;

/* Table of booleans, true if rule could match eol. */
static yyconst flex_int32_t yy_rule_can_match_eol[109] =
    {   0,
1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 1, 0, 0, 0, 0, 0, 0,     };

static yy_state_type yy_last_accepting_state;
static char *yy_last_accepting_cpos;

extern int smt2_flex_debug;
int smt2_flex_debug = 0;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
char *smt2text;
#line 1 "smt2lexer.ll"
/*********************************************************************
Author: Roberto Bruttomesso <roberto.bruttomesso@gmail.com>

OpenSMT -- Copyright (C) 2010, Roberto Bruttomesso

OpenSMT is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

OpenSMT is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with OpenSMT. If not, see <http://www.gnu.org/licenses/>.
*********************************************************************/
#line 21 "smt2lexer.ll"

#include <cstdio>
#include <cstdlib>
/* Keep the following headers in their original order */
#include "Egraph.h"
#include "ParserTypes.h"
#include "smt2parser.h"


#define BUFFER2_LENGTH 1024
char   buffer2[ BUFFER2_LENGTH ];
char * pbuffer2;

  


#line 841 "smt2lexer.cc"

#define INITIAL 0
#define start_source 1
#define start_comment 2

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

static int yy_init_globals (void );

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int smt2lex_destroy (void );

int smt2get_debug (void );

void smt2set_debug (int debug_flag  );

YY_EXTRA_TYPE smt2get_extra (void );

void smt2set_extra (YY_EXTRA_TYPE user_defined  );

FILE *smt2get_in (void );

void smt2set_in  (FILE * in_str  );

FILE *smt2get_out (void );

void smt2set_out  (FILE * out_str  );

yy_size_t smt2get_leng (void );

char *smt2get_text (void );

int smt2get_lineno (void );

void smt2set_lineno (int line_number  );

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int smt2wrap (void );
#else
extern int smt2wrap (void );
#endif
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * );
#endif

#ifndef YY_NO_INPUT

#ifdef __cplusplus
static int yyinput (void );
#else
static int input (void );
#endif

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 8192
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO fwrite( smt2text, smt2leng, 1, smt2out )
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		yy_size_t n; \
		for ( n = 0; n < max_size && \
			     (c = getc( smt2in )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( smt2in ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = fread(buf, 1, max_size, smt2in))==0 && ferror(smt2in)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(smt2in); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int smt2lex (void);

#define YY_DECL int smt2lex (void)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after smt2text and smt2leng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;
    
#line 43 "smt2lexer.ll"


#line 1026 "smt2lexer.cc"

	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! smt2in )
			smt2in = stdin;

		if ( ! smt2out )
			smt2out = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			smt2ensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				smt2_create_buffer(smt2in,YY_BUF_SIZE );
		}

		smt2_load_buffer_state( );
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = (yy_c_buf_p);

		/* Support of smt2text. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = (yy_start);
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			if ( yy_accept[yy_current_state] )
				{
				(yy_last_accepting_state) = yy_current_state;
				(yy_last_accepting_cpos) = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 519 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 570 );

yy_find_action:
		yy_act = yy_accept[yy_current_state];
		if ( yy_act == 0 )
			{ /* have to back up */
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			yy_act = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

		if ( yy_act != YY_END_OF_BUFFER && yy_rule_can_match_eol[yy_act] )
			{
			int yyl;
			for ( yyl = 0; yyl < smt2leng; ++yyl )
				if ( smt2text[yyl] == '\n' )
					   
    smt2lineno++;
;
			}

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = (yy_hold_char);
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			goto yy_find_action;

case 1:
/* rule 1 can match eol */
YY_RULE_SETUP
#line 45 "smt2lexer.ll"
{ }
	YY_BREAK
case 2:
/* rule 2 can match eol */
YY_RULE_SETUP
#line 46 "smt2lexer.ll"
{ }
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 47 "smt2lexer.ll"
{ return TK_PRINT_SUCCESS; }
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 48 "smt2lexer.ll"
{ return TK_EXPAND_DEFINITIONS; }
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 49 "smt2lexer.ll"
{ return TK_INTERACTIVE_MODE; }
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 50 "smt2lexer.ll"
{ return TK_PRODUCE_PROOFS; }
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 51 "smt2lexer.ll"
{ return TK_PRODUCE_UNSAT_CORES; }
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 52 "smt2lexer.ll"
{ return TK_PRODUCE_INTERPOLANTS; }
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 53 "smt2lexer.ll"
{ return TK_PRODUCE_MODELS; }
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 54 "smt2lexer.ll"
{ return TK_PRODUCE_ASSIGNMENTS; }
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 55 "smt2lexer.ll"
{ return TK_REGULAR_OUTPUT_CHANNEL; }
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 56 "smt2lexer.ll"
{ return TK_DIAGNOSTIC_OUTPUT_CHANNEL; }
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 57 "smt2lexer.ll"
{ return TK_RANDOM_SEED; }
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 58 "smt2lexer.ll"
{ return TK_VERBOSITY; }
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 59 "smt2lexer.ll"
{ return TK_SETLOGIC; }
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 60 "smt2lexer.ll"
{ return TK_SETINFO; }
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 61 "smt2lexer.ll"
{ return TK_SETOPTION; }
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 62 "smt2lexer.ll"
{ return TK_DECLARESORT; }
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 63 "smt2lexer.ll"
{ return TK_DEFINESORT; }
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 64 "smt2lexer.ll"
{ return TK_DECLAREFUN; }
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 65 "smt2lexer.ll"
{ return TK_DEFINEFUN; }
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 66 "smt2lexer.ll"
{ return TK_PUSH; }
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 67 "smt2lexer.ll"
{ return TK_POP; }
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 68 "smt2lexer.ll"
{ return TK_CHECKSAT; }
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 69 "smt2lexer.ll"
{ return TK_GETASSERTIONS; }
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 70 "smt2lexer.ll"
{ return TK_GETPROOF; }
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 71 "smt2lexer.ll"
{ return TK_GETINTERPOLANTS; }
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 72 "smt2lexer.ll"
{ return TK_GETUNSATCORE; }
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 73 "smt2lexer.ll"
{ return TK_GETVALUE; }
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 74 "smt2lexer.ll"
{ return TK_GETASSIGNMENT; }
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 75 "smt2lexer.ll"
{ return TK_GETOPTION; }
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 76 "smt2lexer.ll"
{ return TK_GETINFO; }
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 77 "smt2lexer.ll"
{ return TK_EXIT; }
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 78 "smt2lexer.ll"
{ return TK_AS; }
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 79 "smt2lexer.ll"
{ return TK_DISTINCT; }
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 80 "smt2lexer.ll"
{ return TK_LET; }
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 81 "smt2lexer.ll"
{ return TK_FORALL; }
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 82 "smt2lexer.ll"
{ return TK_EXISTS; }
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 83 "smt2lexer.ll"
{ return TK_ANNOT; }
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 84 "smt2lexer.ll"
{ return TK_ASSERT; }
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 85 "smt2lexer.ll"
{ return TK_PLUS; }
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 86 "smt2lexer.ll"
{ return TK_MINUS; }
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 87 "smt2lexer.ll"
{ return TK_TIMES; }
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 88 "smt2lexer.ll"
{ return TK_DIV; }
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 89 "smt2lexer.ll"
{ return TK_EQ; }
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 90 "smt2lexer.ll"
{ return TK_LEQ; }
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 91 "smt2lexer.ll"
{ return TK_GEQ; }
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 92 "smt2lexer.ll"
{ return TK_LT; }
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 93 "smt2lexer.ll"
{ return TK_GT; }
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 94 "smt2lexer.ll"
{ return TK_BVSLT; }
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 95 "smt2lexer.ll"
{ return TK_BVSGT; }
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 96 "smt2lexer.ll"
{ return TK_BVSLE; }
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 97 "smt2lexer.ll"
{ return TK_BVSGE; }
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 98 "smt2lexer.ll"
{ return TK_BVULT; }
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 99 "smt2lexer.ll"
{ return TK_BVUGT; }
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 100 "smt2lexer.ll"
{ return TK_BVULE; }
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 101 "smt2lexer.ll"
{ return TK_BVUGE; }
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 102 "smt2lexer.ll"
{ return TK_CONCAT; }
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 103 "smt2lexer.ll"
{ return TK_EXTRACT; }
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 104 "smt2lexer.ll"
{ return TK_BVAND; }
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 105 "smt2lexer.ll"
{ return TK_BVOR; }
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 106 "smt2lexer.ll"
{ return TK_BVXOR; }
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 107 "smt2lexer.ll"
{ return TK_BVNOT; }
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 108 "smt2lexer.ll"
{ return TK_BVADD; }
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 109 "smt2lexer.ll"
{ return TK_BVSUB; }
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 110 "smt2lexer.ll"
{ return TK_BVMUL; }
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 111 "smt2lexer.ll"
{ return TK_BVNEG; }
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 112 "smt2lexer.ll"
{ return TK_BVLSHR; }
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 113 "smt2lexer.ll"
{ return TK_BVASHR; }
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 114 "smt2lexer.ll"
{ return TK_BVSHL; }
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 115 "smt2lexer.ll"
{ return TK_BVSREM; }
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 116 "smt2lexer.ll"
{ return TK_BVUREM; }
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 117 "smt2lexer.ll"
{ return TK_BVSDIV; }
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 118 "smt2lexer.ll"
{ return TK_STORE; }
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 119 "smt2lexer.ll"
{ return TK_SELECT; }
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 120 "smt2lexer.ll"
{ return TK_DIFF; }
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 121 "smt2lexer.ll"
{ return TK_SIGN_EXTEND; }
	YY_BREAK
case 78:
YY_RULE_SETUP
#line 122 "smt2lexer.ll"
{ return TK_ZERO_EXTEND; }
	YY_BREAK
case 79:
YY_RULE_SETUP
#line 123 "smt2lexer.ll"
{ return TK_ROTATE_LEFT; }
	YY_BREAK
case 80:
YY_RULE_SETUP
#line 124 "smt2lexer.ll"
{ return TK_ROTATE_RIGHT; }
	YY_BREAK
case 81:
YY_RULE_SETUP
#line 125 "smt2lexer.ll"
{ return TK_IMPLIES; }
	YY_BREAK
case 82:
YY_RULE_SETUP
#line 126 "smt2lexer.ll"
{ return TK_AND; }
	YY_BREAK
case 83:
YY_RULE_SETUP
#line 127 "smt2lexer.ll"
{ return TK_OR; }
	YY_BREAK
case 84:
YY_RULE_SETUP
#line 128 "smt2lexer.ll"
{ return TK_NOT; }
	YY_BREAK
case 85:
YY_RULE_SETUP
#line 129 "smt2lexer.ll"
{ return TK_IFF; }
	YY_BREAK
case 86:
YY_RULE_SETUP
#line 130 "smt2lexer.ll"
{ return TK_XOR; }
	YY_BREAK
case 87:
YY_RULE_SETUP
#line 131 "smt2lexer.ll"
{ return TK_TRUE; }
	YY_BREAK
case 88:
YY_RULE_SETUP
#line 132 "smt2lexer.ll"
{ return TK_FALSE; }
	YY_BREAK
case 89:
YY_RULE_SETUP
#line 133 "smt2lexer.ll"
{ return TK_ITE; }
	YY_BREAK
case 90:
YY_RULE_SETUP
#line 134 "smt2lexer.ll"
{ return TK_ARRAY; }
	YY_BREAK
case 91:
YY_RULE_SETUP
#line 135 "smt2lexer.ll"
{ return TK_INT; }
	YY_BREAK
case 92:
YY_RULE_SETUP
#line 136 "smt2lexer.ll"
{ return TK_REAL; }
	YY_BREAK
case 93:
YY_RULE_SETUP
#line 137 "smt2lexer.ll"
{ return TK_BOOL; }
	YY_BREAK
case 94:
YY_RULE_SETUP
#line 139 "smt2lexer.ll"
{ smt2lval.str = strdup( smt2text ); return TK_NUM; }
	YY_BREAK
case 95:
YY_RULE_SETUP
#line 140 "smt2lexer.ll"
{ smt2lval.str = strdup( smt2text ); return TK_DEC; }
	YY_BREAK
case 96:
YY_RULE_SETUP
#line 141 "smt2lexer.ll"
{ smt2lval.str = strdup( smt2text ); return TK_HEX; }
	YY_BREAK
case 97:
YY_RULE_SETUP
#line 142 "smt2lexer.ll"
{ smt2lval.str = strdup( smt2text ); return TK_BIN; }
	YY_BREAK
case 98:
YY_RULE_SETUP
#line 143 "smt2lexer.ll"
{ smt2lval.str = strdup( smt2text ); return TK_KEY; }
	YY_BREAK
case 99:
YY_RULE_SETUP
#line 144 "smt2lexer.ll"
{ smt2lval.str = strdup( smt2text ); return TK_SYM; }
	YY_BREAK
case 100:
YY_RULE_SETUP
#line 148 "smt2lexer.ll"
{ pbuffer2 = buffer2; BEGIN(start_source); }
	YY_BREAK

case 101:
YY_RULE_SETUP
#line 150 "smt2lexer.ll"
{ *pbuffer2++ = smt2text[0]; }
	YY_BREAK
case 102:
/* rule 102 can match eol */
YY_RULE_SETUP
#line 151 "smt2lexer.ll"
{ *pbuffer2++ = '\n'; }
	YY_BREAK
case 103:
YY_RULE_SETUP
#line 152 "smt2lexer.ll"
{ *pbuffer2 = '\0'; smt2lval.str = strdup( buffer2 );
                   BEGIN(INITIAL); return TK_SYM; }
	YY_BREAK

case 104:
YY_RULE_SETUP
#line 156 "smt2lexer.ll"
{ smt2lval.str = strdup( smt2text ); return TK_STR; }    
	YY_BREAK
case 105:
YY_RULE_SETUP
#line 157 "smt2lexer.ll"
{ return *smt2text; }
	YY_BREAK
case 106:
YY_RULE_SETUP
#line 158 "smt2lexer.ll"
{ return *smt2text; }
	YY_BREAK
case 107:
YY_RULE_SETUP
#line 159 "smt2lexer.ll"
{ printf( "Syntax error at line %d near %s\n", smt2lineno, smt2text ); exit( 1 ); }
	YY_BREAK
case 108:
YY_RULE_SETUP
#line 161 "smt2lexer.ll"
ECHO;
	YY_BREAK
#line 1665 "smt2lexer.cc"
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(start_source):
case YY_STATE_EOF(start_comment):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed smt2in at a new source and called
			 * smt2lex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = smt2in;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = (yy_c_buf_p);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( smt2wrap( ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * smt2text, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
} /* end of smt2lex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (void)
{
    	register char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	register char *source = (yytext_ptr);
	register int number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr)) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			yy_size_t num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER;

			int yy_c_buf_p_offset =
				(int) ((yy_c_buf_p) - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				yy_size_t new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					smt2realloc((void *) b->yy_ch_buf,b->yy_buf_size + 2  );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			(yy_c_buf_p) = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			smt2restart(smt2in  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((yy_size_t) ((yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		yy_size_t new_size = (yy_n_chars) + number_to_move + ((yy_n_chars) >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) smt2realloc((void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf,new_size  );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
	}

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (void)
{
	register yy_state_type yy_current_state;
	register char *yy_cp;
    
	yy_current_state = (yy_start);

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			(yy_last_accepting_state) = yy_current_state;
			(yy_last_accepting_cpos) = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 519 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state )
{
	register int yy_is_jam;
    	register char *yy_cp = (yy_c_buf_p);

	register YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		(yy_last_accepting_state) = yy_current_state;
		(yy_last_accepting_cpos) = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 519 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 518);

	return yy_is_jam ? 0 : yy_current_state;
}

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (void)
#else
    static int input  (void)
#endif

{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			yy_size_t offset = (yy_c_buf_p) - (yytext_ptr);
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					smt2restart(smt2in );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( smt2wrap( ) )
						return 0;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve smt2text */
	(yy_hold_char) = *++(yy_c_buf_p);

	if ( c == '\n' )
		   
    smt2lineno++;
;

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void smt2restart  (FILE * input_file )
{
    
	if ( ! YY_CURRENT_BUFFER ){
        smt2ensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            smt2_create_buffer(smt2in,YY_BUF_SIZE );
	}

	smt2_init_buffer(YY_CURRENT_BUFFER,input_file );
	smt2_load_buffer_state( );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
    void smt2_switch_to_buffer  (YY_BUFFER_STATE  new_buffer )
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		smt2pop_buffer_state();
	 *		smt2push_buffer_state(new_buffer);
     */
	smt2ensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	smt2_load_buffer_state( );

	/* We don't actually know whether we did this switch during
	 * EOF (smt2wrap()) processing, but the only time this flag
	 * is looked at is after smt2wrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

static void smt2_load_buffer_state  (void)
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	smt2in = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE smt2_create_buffer  (FILE * file, int  size )
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) smt2alloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in smt2_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) smt2alloc(b->yy_buf_size + 2  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in smt2_create_buffer()" );

	b->yy_is_our_buffer = 1;

	smt2_init_buffer(b,file );

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with smt2_create_buffer()
 * 
 */
    void smt2_delete_buffer (YY_BUFFER_STATE  b )
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		smt2free((void *) b->yy_ch_buf  );

	smt2free((void *) b  );
}

#ifndef __cplusplus
extern int isatty (int );
#endif /* __cplusplus */
    
/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a smt2restart() or at EOF.
 */
    static void smt2_init_buffer  (YY_BUFFER_STATE  b, FILE * file )

{
	int oerrno = errno;
    
	smt2_flush_buffer(b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then smt2_init_buffer was _probably_
     * called from smt2restart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
    void smt2_flush_buffer (YY_BUFFER_STATE  b )
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		smt2_load_buffer_state( );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
void smt2push_buffer_state (YY_BUFFER_STATE new_buffer )
{
    	if (new_buffer == NULL)
		return;

	smt2ensure_buffer_stack();

	/* This block is copied from smt2_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from smt2_switch_to_buffer. */
	smt2_load_buffer_state( );
	(yy_did_buffer_switch_on_eof) = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
void smt2pop_buffer_state (void)
{
    	if (!YY_CURRENT_BUFFER)
		return;

	smt2_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		smt2_load_buffer_state( );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void smt2ensure_buffer_stack (void)
{
	yy_size_t num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
		num_to_alloc = 1;
		(yy_buffer_stack) = (struct yy_buffer_state**)smt2alloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in smt2ensure_buffer_stack()" );
								  
		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));
				
		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		int grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)smt2realloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in smt2ensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * 
 * @return the newly allocated buffer state object. 
 */
YY_BUFFER_STATE smt2_scan_buffer  (char * base, yy_size_t  size )
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return 0;

	b = (YY_BUFFER_STATE) smt2alloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in smt2_scan_buffer()" );

	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = 0;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	smt2_switch_to_buffer(b  );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to smt2lex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * 
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       smt2_scan_bytes() instead.
 */
YY_BUFFER_STATE smt2_scan_string (yyconst char * yystr )
{
    
	return smt2_scan_bytes(yystr,strlen(yystr) );
}

/** Setup the input buffer state to scan the given bytes. The next call to smt2lex() will
 * scan from a @e copy of @a bytes.
 * @param bytes the byte buffer to scan
 * @param len the number of bytes in the buffer pointed to by @a bytes.
 * 
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE smt2_scan_bytes  (yyconst char * yybytes, yy_size_t  _yybytes_len )
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n, i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = _yybytes_len + 2;
	buf = (char *) smt2alloc(n  );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in smt2_scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = smt2_scan_buffer(buf,n );
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in smt2_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yy_fatal_error (yyconst char* msg )
{
    	(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up smt2text. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		smt2text[smt2leng] = (yy_hold_char); \
		(yy_c_buf_p) = smt2text + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		smt2leng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the current line number.
 * 
 */
int smt2get_lineno  (void)
{
        
    return smt2lineno;
}

/** Get the input stream.
 * 
 */
FILE *smt2get_in  (void)
{
        return smt2in;
}

/** Get the output stream.
 * 
 */
FILE *smt2get_out  (void)
{
        return smt2out;
}

/** Get the length of the current token.
 * 
 */
yy_size_t smt2get_leng  (void)
{
        return smt2leng;
}

/** Get the current token.
 * 
 */

char *smt2get_text  (void)
{
        return smt2text;
}

/** Set the current line number.
 * @param line_number
 * 
 */
void smt2set_lineno (int  line_number )
{
    
    smt2lineno = line_number;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param in_str A readable stream.
 * 
 * @see smt2_switch_to_buffer
 */
void smt2set_in (FILE *  in_str )
{
        smt2in = in_str ;
}

void smt2set_out (FILE *  out_str )
{
        smt2out = out_str ;
}

int smt2get_debug  (void)
{
        return smt2_flex_debug;
}

void smt2set_debug (int  bdebug )
{
        smt2_flex_debug = bdebug ;
}

static int yy_init_globals (void)
{
        /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from smt2lex_destroy(), so don't allocate here.
     */

    /* We do not touch smt2lineno unless the option is enabled. */
    smt2lineno =  1;
    
    (yy_buffer_stack) = 0;
    (yy_buffer_stack_top) = 0;
    (yy_buffer_stack_max) = 0;
    (yy_c_buf_p) = (char *) 0;
    (yy_init) = 0;
    (yy_start) = 0;

/* Defined in main.c */
#ifdef YY_STDINIT
    smt2in = stdin;
    smt2out = stdout;
#else
    smt2in = (FILE *) 0;
    smt2out = (FILE *) 0;
#endif

    /* For future reference: Set errno on error, since we are called by
     * smt2lex_init()
     */
    return 0;
}

/* smt2lex_destroy is for both reentrant and non-reentrant scanners. */
int smt2lex_destroy  (void)
{
    
    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		smt2_delete_buffer(YY_CURRENT_BUFFER  );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		smt2pop_buffer_state();
	}

	/* Destroy the stack itself. */
	smt2free((yy_buffer_stack) );
	(yy_buffer_stack) = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * smt2lex() is called, initialization will occur. */
    yy_init_globals( );

    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n )
{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s )
{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *smt2alloc (yy_size_t  size )
{
	return (void *) malloc( size );
}

void *smt2realloc  (void * ptr, yy_size_t  size )
{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
}

void smt2free (void * ptr )
{
	free( (char *) ptr );	/* see smt2realloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 161 "smt2lexer.ll"



